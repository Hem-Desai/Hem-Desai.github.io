import { createClient } from "@supabase/supabase-js";
import * as dotenv from "dotenv";
import { fileURLToPath } from "url";
import { dirname, join } from "path";

// Load environment variables
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
dotenv.config({ path: join(__dirname, "..", ".env") });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error("Missing Supabase environment variables");
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function setupDatabase() {
  try {
    // Try to create the table directly since we have admin access
    const { error: createError } = await supabase.rpc("create_table", {
      table_sql: `
        create table if not exists public.reactions (
          id bigint generated by default as identity primary key,
          created_at timestamp with time zone default timezone('utc'::text, now()) not null,
          emoji text not null,
          count integer default 1 not null
        );

        -- Set up RLS
        alter table public.reactions enable row level security;

        -- Allow public read access
        create policy "Allow public read access on reactions"
          on public.reactions
          for select
          to public
          using (true);

        -- Allow public insert/update
        create policy "Allow public insert/update on reactions"
          on public.reactions
          for all
          to public
          using (true)
          with check (true);
      `,
    });

    if (createError) {
      console.error("Error creating table:", createError);
      return;
    }

    console.log("Database setup completed successfully!");
  } catch (error) {
    console.error("Error setting up database:", error);
  }
}

setupDatabase();
